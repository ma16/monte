INSTALLATION

The platform must be POSIX compliant (e.g. Raspbian) and must support /dev/mem and /dev/vcio.

For the remainder of the document it is assumed that Raspbian Stretch is installed (see RASPBIAN document in this folder). 

https://downloads.raspberrypi.org/raspbian/images/raspbian-2017-09-08/2017-09-07-raspbian-stretch.zip

Other distributions and also other versions of Raspbian may or may not work.

There are four ways to download/build monte:

* Download source and build a static binary.
* Download source and build a dynamic binary.
* Download a pre-built static binary.
* Download a pre-built dynamic binary.

It is recommended to download the sources and build the program as a static binary. Download and usage of pre-built files is highly discouraged.

BUILD STATIC BINARY

This requires a static Qt build-environment. See QT_BUILD for details.

The application depends on:
* Boost (see http://www.boost.org)

$ sudo apt-get -y install libboost-dev

...libboost1.62-dev:armhf/1.62.0+dfsg-4 was installed.

Download and compile the application:

$ wget https://github.com/ma16/monte/archive/master.zip
$ unzip master
$ cd monte-master
$ qmake 
$ make

If qmake is not in $PATH, you can call it by absolute path name, e.g /opt/qt/5_9_1_static/bin/qmake

At this point the build is finished and the binary (monte) is ready to be deployed to the target system. 

The size of the binary is about 20 MB. In order to reduce the size, you may want to strip the binary before deployment:

$ strip monte

BUILD DYNAMIC BINARY

This requires a dynamic Qt build-environment. See QT_BUILD for details.

The build process is exactly the same as for the static build above.

Besides the binary itself, you may need to deploy also dynamically linked Qt libraries that are required at runtime. For Raspbian (2017-09-07) you need to deploy QtChars (see QT_BUILD for details).

USE STATIC PRE-BUILT BINARY

For convenience, a pre-built static binary is provided. However, it is strongly encouraged to build your own binary from source.

USE DYNAMIC PRE-BUILT BINARY

For convenience, a pre-built dynamic binary and a pre-built QtCharts shared library are provided. However, it is strongly encouraged to build your own binary and library from source.

The tarball with the shared library needs to be deployed as follows:

$ sudo tar xfvJ libQt5Charts.tar.xz -C /
/usr/lib/arm-linux-gnueabihf/libQt5Charts.la
/usr/lib/arm-linux-gnueabihf/libQt5Charts.prl
/usr/lib/arm-linux-gnueabihf/libQt5Charts.so -> libQt5Charts.so.5.7.1
/usr/lib/arm-linux-gnueabihf/libQt5Charts.so.5 -> libQt5Charts.so.5.7.1
/usr/lib/arm-linux-gnueabihf/libQt5Charts.so.5.7 -> libQt5Charts.so.5.7.1
/usr/lib/arm-linux-gnueabihf/libQt5Charts.so.5.7.1

RUNTIME

The command line option '-v' gives you a diagnostic message. E.g.:

$ ./monte -v
Qt version: 5.7.1
Build time: Oct 19 2017 10:19:09

In order to work properly, the program needs to be executed with root permission (unless /dev/mem and /dev/vcio permit non-root access):

$ gksudo ./monte

If you use sudo instead, you may get a diagnostic message (warning):

$ sudo ./monte
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'

You can make the program SUID root:

$ sudo chown root:root monte ; sudo chmod u+s monte

The program makes use of the Pi's ARM Counter peripheral. The ARM Counter runs on the Video Core's clock which is normally 250 MHz. However, on the Pi-Zero and on the Pi-3, the clock is 400 Mhz and drops to 250 Mhz when idle. This program needs the clock to be fixed to 250 MHz:

/boot/config.txt: core_freq=250

Note: This may cause (relatively) slight performance impacts: The clock drives the memory bus. This clock drives also the Video Core's L2 cache. On a BCM2835, the L2 cache can be shared with the ARM core that runs Linux. [see https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md]

The program uses the Event Detect Status Register. The Raspbian kernel detects that and disables a related interrupt.

Message from syslogd@fastpi at Oct 22 10:08:22 ...
 kernel:[ 3858.485793] Disabling IRQ #79

REFERENCE

This project including this file is hosted at https://github.com/ma16/monte.
